// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String?
  imageUrl  String?  @db.Text
  email     String   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members   Member[]
  servers   Server[]
  channels  Channel[]
  orders    Order[]
}

model MenuItem {
  id          String   @id @default(uuid())
  name        String
  description String
  imageUrl    String?  @db.Text
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Create a many-to-many relationship through the OrderItem model
  orderItems  OrderItem[]
}

model Order {
  id          String   @id @default(uuid())
  profileId   String   
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Create a many-to-many relationship through the OrderItem model
  orderItems  OrderItem[]
  @@index([profileId])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  menuItemId  String
  quantity    Int      // Add any additional fields related to the association here
  totalSum    Int

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([orderId])
  @@index([menuItemId])
}


model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String?  @db.Text
  inviteCode String?  @unique

  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members    Member[]
  channels   Channel[]

  @@index([profileId])
  
}

enum MeberRole {
  MODERATOR
  ADMIN
  GUEST
}

model Member {
  id        String    @id @default(uuid())
  role      MeberRole @default(GUEST)

  profileId  String
  server    Server    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  profile   Profile   @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([serverId])
  @@index([profileId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)

  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([profileId])
  @@index([serverId])
}